<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Timesheet Composer.
   -
   - The Initial Developer of the Original Code is INRIA.
   - Portions created by the Initial Developer are Copyright (C) 2010-2011
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -    Fabien Cazenave <fabien@cazenave.cc>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet type="text/css" href="chrome://global/skin/" ?>
<bindings id="timelineWidgets"
    xmlns      = "http://www.mozilla.org/xbl"
    xmlns:xbl  = "http://www.mozilla.org/xbl"
    xmlns:xul  = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:html = "http://www.w3.org/1999/xhtml">

  <!-- Time Controller: toolbar + media player + waveform graph
     -
     -  Attributes:
     -    hidetoolbar          hides the toolbar ^^
     -    media                CSS selector of an <audio> or <video> element
     -
     -  Properties:
     -    begin                visible area: begin time        (read-only)
     -    currentTime          cursor position
     -    end                  visible area: end time          (read-only)
     -    media                outer <audio|video> object      (read-only)
     -    selection            current time span               
     -    waveform             inner <waveform> object         (read-only)
     -
     -  Methods:
     -    select               selects a time span
     -    zoomIn               zoom current waveform image
     -    zoomOut              unzoom current waveform image
     -->
       
  <binding id="timeController">
    <resources>
      <stylesheet src="widgets.css" />
    </resources>

    <content>
      <xul:vbox xbl:inherits="flex">

        <!-- toolbar -->
        <xul:toolbar anonid="toolbar" class="chromeclass-toolbar" align="center"
                     xbl:inherits="hidden=hidetoolbar">
          <xul:toolbarbutton anonid="mediaPlay"  tooltiptext="Play"  oncommand="media.play();"/>
          <xul:toolbarbutton anonid="mediaPause" tooltiptext="Pause" oncommand="media.pause();"/>
          <xul:vbox>
		  <xul:hbox>
            <xul:textbox id="mediaTime1" anonid="mediaTime" type="time" value="0" decimals="0" max="3599"/>
			<xul:textbox id="mediaTime2" anonid="mediaTimeEnd" type="time" value="0" decimals="0" max="3599"/>
		  </xul:hbox>
          </xul:vbox>
          <xul:spacer flex="1" />
          <xul:toolbarbutton anonid="zoomFit" tooltiptext="Fit"      oncommand="zoomOut(true);"/>
          <xul:toolbarbutton anonid="zoomIn"  tooltiptext="Zoom In"  oncommand="zoomIn();"/>
          <xul:toolbarbutton anonid="zoomOut" tooltiptext="Zoom Out" oncommand="zoomOut();"/>
          <children />
        </xul:toolbar>

        <!-- timeline -->
        <xul:waveform id="wave" anonid="waveform" flex="1" />

      </xul:vbox>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          // UI elements
          const toolbar   = document.getAnonymousElementByAttribute(this, "anonid", "toolbar");
          const waveform  = document.getAnonymousElementByAttribute(this, "anonid", "waveform");
          const mediaTime = document.getAnonymousElementByAttribute(this, "anonid", "mediaTime");
		  const mediaTimeEnd = document.getAnonymousElementByAttribute(this, "anonid", "mediaTimeEnd");

          // parse the 'media' attribute and get the related <audio|video> element
          try {
            const media = document.querySelector(this.getAttribute("media"));
          } catch(e) {
            throw "the timeContainer element requires a valid 'media' attribute.";
          }
          if (!media || !(/(audio|video)$/i).test(media.nodeName))
            throw "the timeContainer's 'media' attribute does not refer to a valid <audio|video> element.";

          // attach event listeners when the media player is ready
          media.addEventListener("loadedmetadata", function() {
            mediaTime.min = 0;
            mediaTime.max = media.duration;
			mediaTimeEnd.min = 0;
			mediaTimeEnd.max = media.duration;
            /*waveform.duration = media.duration;*/
            /*waveform.cursor.setRange(0, media.duration);*/
          }, false);
		  

          // 'timeupdate' event listeners for media, mediaTime, waveform
          media.addEventListener("MozAudioAvailable", function(event) {
			//alert("test");
            var currentTime = event.time;
            // the 'timeupdate' event is handled here because the time resolution is much better
            // (about 1ms for 'MozAudioAvailable' instead of 250ms for 'timeupdate')
            // Note that this event is fired only when the media is playing...
            waveform.currentTime = currentTime;
            mediaTime.time       = currentTime;
            if (currentTime > waveform.end) {
              media.pause();
              media.currentTime    = waveform.begin;
              waveform.currentTime = waveform.begin;
              mediaTime.time       = waveform.begin;
            }
            /* Audio API: update waveform graph as the media is played
            media.mozFrameBufferLength = 16384; // max = 16384, default = 1024 * nbChannels
            var samples = event.frameBuffer;
            if (samples.length != event.target.mozFrameBufferLength)
              console.log("unexpected fbLength: " + samples.length); */
            waveform.drawFrameBuffer(currentTime, event.frameBuffer);
          }, false);
		  
		
		  function timeupdatebegin()
		  {
		    waveform.currentTime = mediaTime.time;
			drawOnChange(mediaTime.time,mediaTimeEnd.time);
		  }
		  
		  function timeupdatebeginkey(event)
		  {
			if(event.keyCode == 38 || event.keyCode == 40){
		    waveform.currentTime = mediaTime.time;
			waveform.cursor.end = mediaTimeEnd.time;
			drawOnChange(mediaTime.time,mediaTimeEnd.time);
			}
		  }
		  
		  function timeupdatebeginscroll(event)
		  {
			var parent1 = document.activeElement.parentNode;
			var parent2 = parent1.parentNode;
			
			if(event.detail == 3)
			{
				parent2.time = parent2.time -1;
			}
			if(event.detail == -3)
			{
				parent2.time = parent2.time +1;
			}
			
			if(parent2.getAttribute("id",0) == "mediaTime1")
			{
				waveform.currentTime = parent2.time;
				//alert(waveform.selection.begin);
				waveform.selection.begin = waveform.currentTime;
				//alert(waveform.selection.begin);
			}
			if(parent2.getAttribute("id",0) == "mediaTime2")
				waveform.cursor.end = parent2.time;
				
			//alert(media.currentTime);
			//media.currentTime = waveform.currentTime;
			//alert("test2");
			//mediaTime.time    = waveform.currentTime;
			//mediaTimeEnd.time = waveform.cursor.end;
			//media.currentTime = waveform.currentTime;
			
			drawOnChange(mediaTime.time,mediaTimeEnd.time);
		  }
		  
          mediaTime.addEventListener("change", timeupdatebegin, false);
		  mediaTime.addEventListener("keypress", timeupdatebeginkey, false);
		  document.addEventListener("DOMMouseScroll", timeupdatebeginscroll, false);
		  //mediaTime.onchange = timeupdatebegin();
		  mediaTimeEnd.addEventListener("change", timeupdatebegin, false);
		  mediaTimeEnd.addEventListener("keypress", timeupdatebeginkey, false);
		  
		  function onchangewaveform(event)
		  {
		  
		    var segment = document.getElementById("segment");
			var select = -1;
			
			for(var i = 0; i < segment.childNodes.length; i++)
			{
			  //alert(segment.childNodes[i].style.background);
			  
			  if(segment.childNodes[i].className == "selected")
				select = 1;
			
			}
			
			if(event.button != 0 || select == -1)
			{
				//alert("test");
				mediaTime.time    = waveform.currentTime;
				mediaTimeEnd.time = waveform.cursor.end;
				media.currentTime = waveform.currentTime;
			}
			else
			{
				//alert("test1");
				var segment = document.getElementById("segment");
				var id = -1;
				for(var i = 0; i < segment.childNodes.length; i++)
				{
				  //alert(segment.childNodes[i].style.background);
				
				  if(segment.childNodes[i].className == "selected")
					segment.childNodes[i].className = "unselected";
				
				}
				
				var parentThumb = document.getElementById("sidebar-left");
				var j = 0;
				for(j; j < parentThumb.childNodes.length; j++)
				{
				  //var hbox2 = document.getAnonymousElementByAttribute(parentThumb.childNodes[j], "anonid", "formslide");
				  parentThumb.childNodes[j].className = "unselected";
				}
				
				mediaTime.time    = waveform.currentTime;
				mediaTimeEnd.time = waveform.cursor.end;
				media.currentTime = waveform.currentTime;
			}
		  
		  }
		  
          waveform.addEventListener("click", onchangewaveform, false);
		  
		  mediaTimeEnd.hasFocus = function() {
			return mediaTimeEnd.focused;
		  };
		  mediaTime.hasFocus = function() {
			return mediaTime.focused;
		  };
		  
          // play|pause buttons
          toolbar.className = "pause";
          media.addEventListener("playing", function() { toolbar.className = "playing"; }, false);
          media.addEventListener("pause",   function() { toolbar.className = "pause";   }, false);

          // expose 'media' and 'waveform'
          // XXX these two properties should be considered as read-only
          this.media    = media;
          this.waveform = waveform;
		  
		  function drawOnChange(begin, end)
		  {
		    //alert(begin + " - " + end);
		    //Test : Si un timeNode sélectionné
			//XXX : récupérer l'élément si sa couleur est rouge, c'est limite
			var segment = document.getElementById("segment");
			var id = -1;
			for(var i = 0; i < segment.childNodes.length; i++)
			{
			  //alert(segment.childNodes[i].style.background);
			
			  if(segment.childNodes[i].className == "selected")
				id = segment.childNodes[i].getAttribute("id",0);
			
			}
		    
		    var waveform = document.getElementById("wave");
	
			var mediaTime = document.getElementById("mediaTime1"); 
			var mediaTime2 = document.getElementById("mediaTime2");
			
			var time1 = document.getElementById("time1");
			var time2 = document.getElementById("time2");
			
			//time1.style.left  = "0%";
			//time2.style.left  = "0%";
			//time2.style.width = "0%";
			//alert(mediaTime2.hasFocus());
			//alert(document.activeElement.value);
			//alert(document.activeElement.getAttribute("id",0));
			
			if(begin > end)
			{
			  var swap = begin;
			  begin = end;
			  end = swap;
			}
			var left  = Math.max(begin,  waveform.begin);
			var right = Math.min(end, waveform.end);

			//mediaTime.time = begin;
			//mediaTime2.time = end;
			
			if (left >= right) {
			  time1.style.display = "none";
			} else {
			  var duration = waveform.end - waveform.begin;
			  var ratio = (right - left) / duration;
			  var offset = (left - waveform.begin) / duration;
			  time1.style.left  = (offset * 100) + "%";
			  time2.style.left  = (offset * 100) + "%";
			  time2.style.width = (ratio  * 100) + "%";
			  if(id != -1)
			  {
			    var timenode = document.getElementById(id);
			    timenode.style.left = (offset * 100) + "%";
				timenode.style.width = (ratio  * 100) + "%";
				
			    var recupId = id.split(":");
				var numId = recupId[1];
				
				var slide = document.getElementById("thumb:"+numId);
				//alert(begin);
				slide.begin = begin;
				slide.end = end;
				//alert(slide.begin);
			  }
			}
		  
		  }
		  function drawOnChangeBegin(begin, end)
		  {
		    //alert(begin + " - " + end);
		    //Test : Si un timeNode sélectionné
			//XXX : récupérer l'élément si sa couleur est rouge, c'est limite
			var segment = document.getElementById("segment");
			var id = -1;
			for(var i = 0; i < segment.childNodes.length; i++)
			{
			  //alert(segment.childNodes[i].style.background);
			
			  if(segment.childNodes[i].className == "selected")
				id = segment.childNodes[i].getAttribute("id",0);
			
			}
			
			//alert(begin);
			//alert(end);
		    
		    var waveform = document.getElementById("wave");
	
			var mediaTime = document.getElementById("mediaTime1"); 
			var mediaTime2 = document.getElementById("mediaTime2");
			
			var time1 = document.getElementById("time1");
			var time2 = document.getElementById("time2");
			
			//time1.style.left  = "0%";
			//time2.style.left  = "0%";
			//time2.style.width = "0%";
			//alert(mediaTime2.hasFocus());
			//alert(document.activeElement.value);
			//alert(document.activeElement.getAttribute("id",0));
			
			if(begin > end)
			{
			  var swap = begin;
			  begin = end;
			  end = swap;
			}
			var left  = Math.max(begin,  waveform.begin);
			var right = Math.min(end, waveform.end);

			//mediaTime.time = begin;
			//mediaTime2.time = end;
			
			if (left >= right) {
			  time1.style.display = "none";
			} else {
			  var duration = waveform.end - waveform.begin;
			  var ratio = (right - left) / duration;
			  var offset = (left - waveform.begin) / duration;
			  time1.style.left  = (offset * 100) + "%";
			  time2.style.left  = (offset * 100) + "%";
			  time2.style.width = (ratio  * 100) + "%";
			  if(id != -1)
			  {
			    var timenode = document.getElementById(id);
			    timenode.style.left = (offset * 100) + "%";
				timenode.style.width = (ratio  * 100) + "%";
				
			    var recupId = id.split(":");
				var numId = recupId[1];
				
				var slide = document.getElementById("thumb:"+numId);
				//alert(begin);
				slide.begin = begin;
				slide.end = end;
				//alert(slide.begin);
			  }
			}
		  
		  }
        ]]>
      </constructor>

      <!-- Time Span -->
      <property name="currentTime">
        <getter>
          <![CDATA[
            const mediaTime = document.getAnonymousElementByAttribute(this, "anonid", "mediaTime");
            return mediaTime.time;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            const mediaTime = document.getAnonymousElementByAttribute(this, "anonid", "mediaTime");
            
            mediaTime.time = val;
            this.media.currentTime = val;
            this.waveform.currentTime = val;
          ]]>
        </setter>
      </property>

      <!-- Waveform API, required by <timeContainer> elements -->
      <property name="begin"     onget="return this.waveform.begin;" />
      <property name="end"       onget="return this.waveform.end;" />
      <property name="selection" onget="return this.waveform.selection;" onset="this.waveform.selection = val;"/>
      <method name="select">
        <parameter name="aBegin"/>
        <parameter name="aEnd"/>
        <body>
          <![CDATA[
            this.waveform.select(aBegin, aEnd);
          ]]>
        </body>
      </method>

      <!-- Waveform Zoom -->
      <method name="zoomIn">
        <body>
          <![CDATA[
            const waveform = this.waveform;
            var begin = waveform.cursor.begin;
            var end   = waveform.cursor.end;
            var pos   = (begin + end) / 2;
            if (waveform.cursor.dur <= 0) {
              var dur = waveform.end - waveform.begin;
              begin = Math.max(begin - dur/4, 0);
              end   = Math.min(begin + dur/2, waveform.duration);
              /*waveform.cursor.setBegin(begin);*/
              /*waveform.cursor.setEnd(begin + dur / 2);*/
              //consoleLog("zoom: " + Math.round(begin) + ", " + Math.round(end));
              waveform.select(begin, end);
            }
            function beforeZoom(begin, end) {
              waveform.cursor.clear();
            }
            function afterZoom(begin, end) {
              waveform.cursor.setRange(begin, end);
              waveform.cursor.clear(pos);
              waveform.draw(begin, end);
            }
            waveform.zoomIn(begin, end, beforeZoom, afterZoom);
          ]]>
        </body>
      </method>
      <method name="zoomOut">
        <parameter name="fit"/>
        <body>
          <![CDATA[
            const waveform = this.waveform;
            var begin, end;
            var pos = (waveform.cursor.begin + waveform.cursor.end) / 2;
            if (fit) { // redraw the whole waveform
              begin = 0;
              end = waveform.duration;
            } else {   // unzoom around the current range
              var dur = waveform.end - waveform.begin;
              begin = Math.max(waveform.begin - dur/2, 0);
              end   = Math.min(waveform.end   + dur/2, waveform.duration);
            }
            function beforeZoom(begin, end) {
              waveform.cursor.clear();
            }
            function afterZoom(begin, end) {
              waveform.cursor.setRange(begin, end);
              waveform.cursor.clear(pos);
              waveform.draw(begin, end);
            }
            waveform.zoomOut(begin, end, beforeZoom, afterZoom);
          ]]>
        </body>
      </method>

    </implementation>
  </binding>

  

  <!-- data form to be associated with a time node -->
  <binding id="thumbnail">
    <resources>
      <stylesheet src="chrome://timesheets/skin/timeline.css" />
      <stylesheet src="widgets.css" />
    </resources>

    <content>
      <xul:vbox xbl:inherits="flex">
        <xul:groupbox>
          <!--<xul:hbox pack="end" align="center">
            <xul:label value="begin"/>
            <xul:textbox type="time" decimals="2" anonid="begin" xbl:inherits="value=begin" />
            <xul:label value="end"/>
            <xul:textbox type="time" decimals="2" anonid="end" xbl:inherits="value=end" />
          </xul:hbox>-->
          <xul:textbox anonid="data" xbl:inherits="value=data" multiline="true" value="(empty)"/>
        </xul:groupbox>
      </xul:vbox>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          // UI elements
          const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin");
          const end   = document.getAnonymousElementByAttribute(this, "anonid", "end");
          const data  = document.getAnonymousElementByAttribute(this, "anonid", "data");
        ]]>
      </constructor>

      <property name="begin"
          onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'begin').value;"
          onset="document.getAnonymousElementByAttribute(this, 'anonid', 'begin').time = val;"/>
      <property name="end"
          onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'end').value;"
          onset="document.getAnonymousElementByAttribute(this, 'anonid', 'end').time = val;"/>
      <property name="max">
        <getter>
          <![CDATA[
            const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin");
            const end   = document.getAnonymousElementByAttribute(this, "anonid", "end");
            return begin.max;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin");
            const end   = document.getAnonymousElementByAttribute(this, "anonid", "end");
            begin.max = val;
            end.max = val;
          ]]>
        </setter>
      </property>
      <property name="data"
        onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'data').value;"
        onset="document.getAnonymousElementByAttribute(this, 'anonid', 'data').time = val;"/>
    </implementation>
  </binding>
  
  <binding id="thumbnailTemp">
    <resources>
      <stylesheet src="chrome://timesheets/skin/timeline.css" />
    </resources>

    <content>
       <!-- <xul:hbox class="selected" pack="end" align="center" anonid="formslide">-->
		  <xul:vbox anonid="textslide">
		  <xul:hbox>
            <xul:label value="begin"/>
		    <xul:label anonid="begin1" value=""/>
		  </xul:hbox>
		  <xul:hbox>
            <xul:label value="end"/>
		    <xul:label anonid="end1" value=""/>
		  </xul:hbox>
		  </xul:vbox>
       <!-- </xul:hbox>-->
    </content>
    <implementation>
      <constructor>
        <![CDATA[
          // UI elements
		  //alert("test");
          const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin1");
          const end   = document.getAnonymousElementByAttribute(this, "anonid", "end1");
		  this.nb = 0;
          //const data  = document.getAnonymousElementByAttribute(this, "anonid", "data");
        ]]>
      </constructor>

	  <field name="nb" />
	  <field name="deb"/>
	  <field name="fin"/>
      <property name="begin"
        onget="return this.deb;">
		<getter>
		
		  //var begin = document.getAnonymousElementByAttribute(this, 'anonid', 'begin1').value;
		  //var begin = 0;
		  //var beginModif = hms2time(begin);
		 // return this.deb;
		
		</getter>
		<setter>
		<![CDATA[
		  var begin = val;
		  var beginModif = time2hms(begin);
		  document.getAnonymousElementByAttribute(this, 'anonid', 'begin1').value = beginModif;
		  this.deb = begin;
		]]>
		</setter>
	  </property>
      <property name="end"
        onget="return this.fin;">
		<setter>
		<![CDATA[
		  var end = val;
		  var endModif = time2hms(end);
		  document.getAnonymousElementByAttribute(this, 'anonid', 'end1').value = endModif;
		  this.fin = end;
		]]>
		</setter>
	  </property>
	  <property name="max"
        onget="return this.max;">
        <setter>
		<![CDATA[
		  this.nb = val;
		]]>
		</setter>
	  </property>
    </implementation>
  </binding>

</bindings>

