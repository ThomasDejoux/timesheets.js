<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Timesheet Composer.
   -
   - The Initial Developer of the Original Code is INRIA.
   - Portions created by the Initial Developer are Copyright (C) 2010-2011
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -    Fabien Cazenave <fabien@cazenave.cc>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet type="text/css" href="chrome://global/skin/" ?>
<bindings id="timelineWidgets"
    xmlns      = "http://www.mozilla.org/xbl"
    xmlns:xbl  = "http://www.mozilla.org/xbl"
    xmlns:xul  = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:html = "http://www.w3.org/1999/xhtml">

  <!-- Time Controller: toolbar + media player + waveform graph
     -
     -  Attributes:
     -    hidetoolbar          hides the toolbar ^^
     -    media                CSS selector of an <audio> or <video> element
     -
     -  Properties:
     -    begin                visible area: begin time        (read-only)
     -    currentTime          cursor position
     -    end                  visible area: end time          (read-only)
     -    media                outer <audio|video> object      (read-only)
     -    selection            current time span               (read-only)
     -    waveform             inner <waveform> object         (read-only)
     -
     -  Methods:
     -    select               selects a time span
     -    zoomIn               zoom current waveform image
     -    zoomOut              unzoom current waveform image
     -->
  <binding id="timeController">
    <resources>
      <stylesheet src="widgets.css" />
    </resources>

    <content>
      <xul:vbox xbl:inherits="flex">

        <!-- toolbar -->
        <xul:toolbar anonid="toolbar" class="chromeclass-toolbar" align="center"
                     xbl:inherits="hidden=hidetoolbar">
          <xul:toolbarbutton anonid="mediaPlay"  tooltiptext="Play"  oncommand="media.play();"/>
          <xul:toolbarbutton anonid="mediaPause" tooltiptext="Pause" oncommand="media.pause();"/>
          <xul:vbox>
            <xul:textbox anonid="mediaTime" type="time" value="0" decimals="0" max="3599"/>
          </xul:vbox>
          <xul:spacer flex="1" />
          <xul:toolbarbutton anonid="zoomFit" tooltiptext="Fit"      oncommand="zoomOut(true);"/>
          <xul:toolbarbutton anonid="zoomIn"  tooltiptext="Zoom In"  oncommand="zoomIn();"/>
          <xul:toolbarbutton anonid="zoomOut" tooltiptext="Zoom Out" oncommand="zoomOut();"/>
          <children />
        </xul:toolbar>

        <!-- timeline -->
        <xul:waveform anonid="waveform" flex="1" />

      </xul:vbox>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          // UI elements
          const toolbar   = document.getAnonymousElementByAttribute(this, "anonid", "toolbar");
          const waveform  = document.getAnonymousElementByAttribute(this, "anonid", "waveform");
          const mediaTime = document.getAnonymousElementByAttribute(this, "anonid", "mediaTime");

          // parse the 'media' attribute and get the related <audio|video> element
          try {
            const media = document.querySelector(this.getAttribute("media"));
          } catch(e) {
            throw "the timeContainer element requires a valid 'media' attribute.";
          }
          if (!media || !(/(audio|video)$/i).test(media.nodeName))
            throw "the timeContainer's 'media' attribute does not refer to a valid <audio|video> element.";

          // attach event listeners when the media player is ready
          media.addEventListener("loadedmetadata", function() {
            mediaTime.min = 0;
            mediaTime.max = media.duration;
            /*waveform.duration = media.duration;*/
            /*waveform.cursor.setRange(0, media.duration);*/
          }, false);

          // 'timeupdate' event listeners for media, mediaTime, waveform
          media.addEventListener("MozAudioAvailable", function(event) {
            var currentTime = event.time;
            // the 'timeupdate' event is handled here because the time resolution is much better
            // (about 1ms for 'MozAudioAvailable' instead of 250ms for 'timeupdate')
            // Note that this event is fired only when the media is playing...
            waveform.currentTime = currentTime;
            mediaTime.time       = currentTime;
            if (currentTime > waveform.end) {
              media.pause();
              media.currentTime    = waveform.begin;
              waveform.currentTime = waveform.begin;
              mediaTime.time       = waveform.begin;
            }
            /* Audio API: update waveform graph as the media is played
            media.mozFrameBufferLength = 16384; // max = 16384, default = 1024 * nbChannels
            var samples = event.frameBuffer;
            if (samples.length != event.target.mozFrameBufferLength)
              console.log("unexpected fbLength: " + samples.length); */
            waveform.drawFrameBuffer(currentTime, event.frameBuffer);
          }, false);
          mediaTime.addEventListener("timeupdate", function() {
            waveform.currentTime = mediaTime.time;
          }, false);
          waveform.addEventListener("change", function() {
            mediaTime.time    = waveform.currentTime;
            media.currentTime = waveform.currentTime;
          }, false);

          // play|pause buttons
          toolbar.className = "pause";
          media.addEventListener("playing", function() { toolbar.className = "playing"; }, false);
          media.addEventListener("pause",   function() { toolbar.className = "pause";   }, false);

          // expose 'media' and 'waveform'
          // XXX these two properties should be considered as read-only
          this.media    = media;
          this.waveform = waveform;
        ]]>
      </constructor>

      <!-- Time Span -->
      <property name="currentTime">
        <getter>
          <![CDATA[
            const mediaTime = document.getAnonymousElementByAttribute(this, "anonid", "mediaTime");
            return mediaTime.time;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            const mediaTime = document.getAnonymousElementByAttribute(this, "anonid", "mediaTime");
            mediaTime.time = val;
            this.media.currentTime = val;
            this.waveform.currentTime = val;
          ]]>
        </setter>
      </property>

      <!-- Waveform API, required by <timeContainer> elements -->
      <property name="begin"     onget="return this.waveform.begin;" />
      <property name="end"       onget="return this.waveform.end;" />
      <property name="selection" onget="return this.waveform.selection;" />
      <method name="select">
        <parameter name="aBegin"/>
        <parameter name="aEnd"/>
        <body>
          <![CDATA[
            this.waveform.select(aBegin, aEnd);
          ]]>
        </body>
      </method>

      <!-- Waveform Zoom -->
      <method name="zoomIn">
        <body>
          <![CDATA[
            const waveform = this.waveform;
            var begin = waveform.cursor.begin;
            var end   = waveform.cursor.end;
            var pos   = (begin + end) / 2;
            if (waveform.cursor.dur <= 0) {
              var dur = waveform.end - waveform.begin;
              begin = Math.max(begin - dur/4, 0);
              end   = Math.min(begin + dur/2, waveform.duration);
              /*waveform.cursor.setBegin(begin);*/
              /*waveform.cursor.setEnd(begin + dur / 2);*/
              consoleLog("zoom: " + Math.round(begin) + ", " + Math.round(end));
              waveform.select(begin, end);
            }
            function beforeZoom(begin, end) {
              waveform.cursor.clear();
            }
            function afterZoom(begin, end) {
              waveform.cursor.setRange(begin, end);
              waveform.cursor.clear(pos);
              waveform.draw(begin, end);
            }
            waveform.zoomIn(begin, end, beforeZoom, afterZoom);
          ]]>
        </body>
      </method>
      <method name="zoomOut">
        <parameter name="fit"/>
        <body>
          <![CDATA[
            const waveform = this.waveform;
            var begin, end;
            var pos = (waveform.cursor.begin + waveform.cursor.end) / 2;
            if (fit) { // redraw the whole waveform
              begin = 0;
              end = waveform.duration;
            } else {   // unzoom around the current range
              var dur = waveform.end - waveform.begin;
              begin = Math.max(waveform.begin - dur/2, 0);
              end   = Math.min(waveform.end   + dur/2, waveform.duration);
            }
            function beforeZoom(begin, end) {
              waveform.cursor.clear();
            }
            function afterZoom(begin, end) {
              waveform.cursor.setRange(begin, end);
              waveform.cursor.clear(pos);
              waveform.draw(begin, end);
            }
            waveform.zoomOut(begin, end, beforeZoom, afterZoom);
          ]]>
        </body>
      </method>

    </implementation>
  </binding>

  <!-- Time container -->
  <binding id="timeContainer">
    <resources>
      <stylesheet src="widgets.css" />
    </resources>

    <content>
      <xul:vbox xbl:inherits="flex,controls,dataform">

        <!-- toolbar -->
        <xul:toolbar anonid="toolbar" class="chromeclass-toolbar" pack="begin" align="center"
                     xbl:inherits="hidden=hidetoolbar">
          <xul:toolbarbutton anonid="sort" label="sort" oncommand="computeTimeNodes()"/>
          <xul:spacer flex="1"/>
          <xul:label value="timeContainer:"/>
          <xul:menulist anonid="container" style="width: 100px;" onselect="computeTimeNodes()">
            <xul:menupopup>
              <xul:menuitem value="par"  label="par" selected="true"/>
              <xul:menuitem value="seq"  label="seq" disabled="true"/>
              <xul:menuitem value="excl" label="excl"/>
            </xul:menupopup>
          </xul:menulist>
          <xul:label value="transition:"/>
          <xul:menulist style="width: 200px;">
            <xul:menupopup>
              <xul:menuitem label="none"/>
              <xul:menuseparator />
              <xul:menuitem label="cross-fade"   />
              <xul:menuitem label="fade-through" />
              <xul:menuitem label="slide-x"      />
              <xul:menuitem label="slide-y"      />
              <xul:menuitem label="carousel-x"   />
              <xul:menuitem label="carousel-y"   />
            </xul:menupopup>
          </xul:menulist>
        </xul:toolbar>

        <!-- time segments (filled dynamically) -->
        <html:div anonid="segments" />

      </xul:vbox>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          // UI elements
          const toolbar   = document.getAnonymousElementByAttribute(this, "anonid", "toolbar"  );
          const container = document.getAnonymousElementByAttribute(this, "anonid", "container");
          const segments  = document.getAnonymousElementByAttribute(this, "anonid", "segments" );

          // timeController
          this.controls = document.querySelector(this.getAttribute("controls"));
          /*this.dataform = document.querySelector(this.getAttribute("dataform"));*/
          this.timeNodes = [];
        ]]>
      </constructor>

      <field name="timeNodes" />

      <!-- add/remove time nodes -->
      <method name="add">
        <!--
        <parameter name="aBegin"/>
        <parameter name="aEnd"/>
        -->
        <body>
          <![CDATA[
            const timeCont = this;
            const segments = document.getAnonymousElementByAttribute(this, "anonid", "segments");

            // <hbox> block for the #timeSegments container
            function segmentBlock(parent, begin, end) {
              var self = this;

              // note: the 'main' element could be an <html:div> block
              // but the contextual menu wouldn't work (see 'context' attribute)
              this.main  = document.createElementNS(xulNS, "hbox"); // main block
              this.begin = document.createElementNS(htmlNS, "div"); // left handle
              this.end   = document.createElementNS(htmlNS, "div"); // right handle

              this.begin.className = "handle-left";
              this.end.className   = "handle-right";
              this.main.appendChild(this.begin);
              this.main.appendChild(this.end);
              if (!SCENARI)
                this.main.setAttribute("context", "transition");

              var style = this.main.style;
              this.draw = function (aWaveformBegin, aWaveformEnd) {
                var left  = Math.max(parent.time_in,  aWaveformBegin);
                var right = Math.min(parent.time_out, aWaveformEnd);

                if (left >= right) {
                  style.display = "none";
                } else {
                  var duration = aWaveformEnd - aWaveformBegin;
                  var ratio = (right - left) / duration;
                  var offset = (left - aWaveformBegin) / duration;
                  //style.left  = (offset * gTimeCursor.width) + "px";
                  //style.width = (ratio  * gTimeCursor.width) + "px";
                  //consoleLog("draw (xbl): " + aWaveformBegin + " → " + aWaveformEnd);
                  style.left  = (offset * 100) + "%";
                  style.width = (ratio  * 100) + "%";
                  style.display = "block";
                }
              };
              this.update = function () {
                self.draw(gTimeController.begin, gTimeController.end);
              };
              this.update();

              this.focus = function () {
                self.main.className = "active";
              };
              this.blur = function () {
                self.main.removeAttribute("class");
              };

              // Event listeners: begin/end drag
              function onClick(event) {
              }
              function onResize(event) {
                return; // XXX
                if (event.button) return;
                var begin = mediaPlayer.currentTime;
                var end = getTimePosition(event);
                //self.setDur(end - begin);
                if (end > begin)
                  self.setEnd(end);
                else
                  self.setBegin(end);
              }
              this.begin.addEventListener("mousedown", function(event) {
                onClick(event);
                self.begin.addEventListener("mousemove", onResize, false);
              }, false);
            }

            // main 'timeSegment' object constructor
            function timeSegment(begin, end) {
              //consoleLog("new (xbl): " + begin + " → " + end);

              const self = this;
              this.begin = begin;
              this.end   = end;

              this.time_in  = begin;
              this.time_out = end;

              // append an HTML segment in #timeSegments
              var block = new segmentBlock(this, begin, end);
              //gDialog.timeSegments.appendChild(block.main);
              segments.appendChild(block.main);

              /* append a XUL groupbox in #content
              var controls = new segmentControls(this, begin, end);
              gDialog.content.appendChild(controls.main);
              */

              /* append a thumbnail in #sidebar-left
              var thumb = new segmentThumb(this, begin, end);
              gDialog.sidebarLeft.appendChild(thumb.main);
              */

              this.update = function(aBegin, aEnd) {
                self.begin = aBegin;
                self.end   = aEnd;
                block.update();
                computeTimeNodes();
                updateCursor();
              };

              // event handlers
              function updateCursor() {
                timeCont.controls.select(self.time_in, self.time_out);
                timeCont.controls.currentTime = self.time_in;
              }

              // event handlers :: segmentBlock
              block.begin.onclick = function() {
                // TODO
              };
              block.end.onclick = function() {
                // TODO
              };
              block.main.addEventListener("mouseup", function(event) {
                switch (event.button) {
                  case 0:
                    //controls.focus();
                    //thumb.focus();
                    updateCursor();
                    break;
                  case 1:
                    consoleLog("delete current time node");
                    timeCont.remove(self);
                    break;
                }
              }, false);
              block.main.addEventListener("dblclick", function(event) {
                consoleLog("select current time node");
                updateCursor();
                timeCont.controls.zoomIn();
              }, false);

              /* event handlers :: segmentControls
              controls.begin.oninput = function() {
                var value = hms2time(this.value);
                consoleLog("update: " + value);
                self.update(value, self.end);
              };
              controls.end.oninput = function() {
                var value = hms2time(this.value);
                consoleLog("update: " + value);
                self.update(self.begin, value);
              };
              controls.data.onfocus = function() {
                block.focus();
                updateCursor();
              };
              controls.data.onblur = function() {
                block.blur();
              }; */

              // focus the new time node
              // controls.data.focus();
              // controls.data.select();

              // expose 'controls' and 'block'
              // this.controls = controls;
              this.block    = block;
            }

            var sel = timeCont.controls.selection;
            var begin = Math.round(sel.begin * 100) / 100;
            var end   = Math.round(sel.end   * 100) / 100;
            if (begin == end)
              end = Infinity;
            this.timeNodes.push(new timeSegment(begin, end));
            consoleLog(this.timeNodes.length + " time node(s)");
          ]]>
        </body>
      </method>
      <method name="remove">
        <parameter name="timeSegment"/>
        <body>
          <![CDATA[
            var i = this.timeNodes.indexOf(timeSegment);
            if (i >= 0) {
              //var ctrl = this.timeNodes[i].controls;
              var blck = this.timeNodes[i].block;
              //ctrl.main.parentNode.removeChild(ctrl.main);
              blck.main.parentNode.removeChild(blck.main);
              this.timeNodes.splice(i, 1);
            }
          ]]>
        </body>
      </method>

      <method name="sort">
        <body>
          <![CDATA[
            if (!this.timeNodes) return; // XXX wtf?
            const segments = document.getAnonymousElementByAttribute(this, "anonid", "segments");
            var swap, data1, data2;
            do { // there are few items, we can do a lazy bubble sort
              swap = false;
              for (var i = 0; i < this.timeNodes.length - 1; i++) {
                //consoleLog("order #" + i);
                var curr = this.timeNodes[i];
                var next = this.timeNodes[i+1];
                if (curr.begin > next.begin) { // swap these two items
                  consoleLog("swap #" + i);
                  //data1 = curr.controls.data.value;
                  //data2 = next.controls.data.value;
                  //gDialog.content.insertBefore(next.controls.main, curr.controls.main);
                  //gDialog.timeSegments.insertBefore(next.block.main, curr.block.main);
                  //curr.controls.data.value = data1;
                  //next.controls.data.value = data2;
                  segments.insertBefore(next.block.main, curr.block.main);
                  this.timeNodes[i]   = next;
                  this.timeNodes[i+1] = curr;
                  swap = true;
                }
              }
            } while(swap);
          ]]>
        </body>
      </method>
      <method name="computeTimeNodes">
        <body>
          <![CDATA[
            if (!this.timeNodes) return; // XXX wtf?
            this.sort();
            var timeContainer = document.getAnonymousElementByAttribute(this,
                "anonid", "container").value;
            /*consoleLog(timeContainer);*/
            for (var i = 0; i < this.timeNodes.length - 1; i++) {
              var out;
              var end = this.timeNodes[i].end;
              //if (!end.length) end = Infinity;
              //consoleLog("end = " + end);
              if ((timeContainer == "par") || (end < this.timeNodes[i+1].begin))
                out = this.timeNodes[i].end;
              else
                out = this.timeNodes[i+1].begin;
              this.timeNodes[i].time_in = this.timeNodes[i].begin;
              this.timeNodes[i].time_out = out;
              this.timeNodes[i].block.update();
            }
            this.draw();
          ]]>
        </body>
      </method>

      <!-- visual timeline -->
      <method name="draw">
        <parameter name="aBegin"/>
        <parameter name="aEnd"/>
        <body>
          <![CDATA[
            /*var begin = this.controls.begin;*/
            /*var end   = this.controls.end;*/
            var begin = Math.min(aBegin, aEnd);
            var end   = Math.max(aBegin, aEnd);
            for (var i = 0; i < this.timeNodes.length; i++) {
              this.timeNodes[i].block.draw(begin, end);
            }
          ]]>
        </body>
      </method>

    </implementation>
  </binding>

  <!-- data form to be associated with a time node -->
  <binding id="thumbnail">
    <resources>
      <stylesheet src="chrome://timesheets/skin/timeline.css" />
    </resources>

    <content>
      <xul:vbox xbl:inherits="flex">
        <xul:groupbox>
          <xul:hbox pack="end" align="center">
            <xul:label value="begin"/>
            <xul:textbox type="time" decimals="2" anonid="begin" xbl:inherits="value=begin" />
            <xul:label value="end"/>
            <xul:textbox type="time" decimals="2" anonid="end" xbl:inherits="value=end" />
          </xul:hbox>
          <xul:textbox anonid="data" xbl:inherits="value=data" multiline="true" value="(empty)"/>
        </xul:groupbox>
      </xul:vbox>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          // UI elements
          const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin");
          const end   = document.getAnonymousElementByAttribute(this, "anonid", "end");
          const data  = document.getAnonymousElementByAttribute(this, "anonid", "data");
        ]]>
      </constructor>

      <property name="begin">
        <getter>
          <![CDATA[
            const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin");
            return begin.time;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin");
            begin.time = val;
          ]]>
        </setter>
      </property>
      <property name="end"
          onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'end').value;"
          onset="document.getAnonymousElementByAttribute(this, 'anonid', 'end').time = val;"/>
      <property name="max">
        <getter>
          <![CDATA[
            const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin");
            const end   = document.getAnonymousElementByAttribute(this, "anonid", "end");
            return begin.max;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            const begin = document.getAnonymousElementByAttribute(this, "anonid", "begin");
            const end   = document.getAnonymousElementByAttribute(this, "anonid", "end");
            begin.max = val;
            end.max = val;
          ]]>
        </setter>
      </property>
      <property name="data"
          onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'data').value;"
          onset="document.getAnonymousElementByAttribute(this, 'anonid', 'data').time = val;"/>
    </implementation>
  </binding>

</bindings>

